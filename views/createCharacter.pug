extends layout

block content 
  if currentUser
    form(method="POST" id="createCharForm" class="flex flex-col gap-y-10 sm:w-1/2 w-5/6 mx-auto bg-blue-400/10 rounded-lg pb-10 shadow-md shadow-blue-300/50")
      //- h1.text-center.text-amber-300.font-mont(class="xl:text-3xl sm:text-lg text-base") Create a character
      #tabsContainer.flex.justify-between.text-black.cursor-pointer.rounded-t-lg(class="xl:text-xl md:text-lg text-base")
        button#detailsButton.mx-auto.rounded-t-xl.activeTab.border-r-2.border-black(type="button" class="w-1/3 transition-colors duration-300" data-name="detailsTab") Details 
        button#abilitiesButton.mx-auto.rounded-t-xl.border-r-2.border-black(type="button" class="w-1/3 transition-colors duration-300" data-name="abilitiesTab") Abilities 
        button#appearanceButton.mx-auto.rounded-t-xl.border-r-2.border-black(type="button" class="w-1/3 transition-colors duration-300" data-name="combatStatsTab") Combat
        button#appearanceButton.mx-auto.rounded-t-xl.border-r-2.border-black(type="button" class="w-1/3 transition-colors duration-300" data-name="appearanceTab") Appearance
        button#appearanceButton.mx-auto.rounded-t-xl(type="button" class="w-1/3 transition-colors duration-300" data-name="personalityTab") Personality

      .tabsContent
        .tabDetails.tab.px-10#detailsTab
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="dndName" class="xl:text-xl text-md text-center md:text-left mb-3") Name 
            input(type="text" required autocomplete="off" id="dndName" name="dndName" value=(undefined === character ? '' : character.name))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="dndClass" class="xl:text-xl text-md text-center md:text-left mb-3") Class
            select#dndClass(name="dndClass" required value=(undefined === character ? '' : character.dndClass))
              option(value="") Select a class
              option(value="Barbarian" selected=(character && character.class === 'Barbarian' ? true : false)) Barbarian
              option(value="Bard" selected=(character && character.class === 'Bard' ? true : false)) Bard
              option(value="Cleric" selected=(character && character.class === 'Cleric' ? true : false)) Cleric
              option(value="Druid" selected=(character && character.class === 'Druid' ? true : false)) Druid
              option(value="Fighter" selected=(character && character.class === 'Fighter' ? true : false)) Fighter
              option(value="Monk" selected=(character && character.class === 'Monk' ? true : false)) Monk
              option(value="Paladin" selected=(character && character.class === 'Paladin' ? true : false)) Paladin
              option(value="Ranger" selected=(character && character.class === 'Ranger' ? true : false)) Ranger
              option(value="Rogue" selected=(character && character.class === 'Rogue' ? true : false)) Rogue
              option(value="Sorcerer" selected=(character && character.class === 'Sorcerer' ? true : false)) Sorcerer
              option(value="Warlock" selected=(character && character.class === 'Warlock' ? true : false)) Warlock
              option(value="Wizard" selected=(character && character.class === 'Wizard' ? true : false)) Wizard
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="dndRace" class="xl:text-xl text-md text-center md:text-left mb-3") Race 
            select#dndRace(name="dndRace" required)
              option(value="") Select a race
              option(value="Dragonborn" selected=(character && character.race === 'Dragonborn' ? true : false)) Dragonborn
              option(value="Dwarf" selected=(character && character.race === 'Dwarf' ? true : false)) Dwarf
              option(value="Elf" selected=(character && character.race === 'Elf' ? true : false)) Elf
              option(value="Gnome" selected=(character && character.race === 'Gnome' ? true : false)) Gnome
              option(value="Half-Elf" selected=(character && character.race === 'Half-Elf' ? true : false)) Half-Elf
              option(value="Halfling" selected=(character && character.race === 'Halfling' ? true : false)) Halfling
              option(value="Half-Orc" selected=(character && character.race === 'Half-Orc' ? true : false)) Half-Orc
              option(value="Human" selected=(character && character.race === 'Human' ? true : false)) Human
              option(value="Tiefling" selected=(character && character.race === 'Tiefling' ? true : false)) Tiefling
              option(value="Custom" selected=(character && character.race === 'Custom' ? true : false)) Custom
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="dndLevel" class="xl:text-xl text-md text-center md:text-left mb-3") Level 
            input(type="number" required autocomplete="off" id="dndLevel" name="dndLevel" value=(undefined === character ? '' : character.level))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="dndBackground" class="xl:text-xl text-md text-center md:text-left mb-3") Background 
            input(type="text" autocomplete="off" id="dndBackground" name="dndBackground" value=(undefined === character ? '' : character.background))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="dndAlignment" class="xl:text-xl text-md text-center md:text-left mb-3") Alignment 
            select#dndAlignment(name="dndAlignment" required)
              option(value="") -----------
              option(value="Lawful Good" selected=(character && character.alignment === 'Lawful Good' ? true : false)) Lawful Good
              option(value="Lawful Neutral" selected=(character && character.alignment === 'Lawful neutral' ? true : false)) Lawful Neutral
              option(value="Lawful Evil" selected=(character && character.alignment === 'Lawful Evil' ? true : false)) Lawful Evil
              option(value="Neutral Good" selected=(character && character.alignment === 'Neutral Good' ? true : false)) Neutral Good
              option(value="True Neutral" selected=(character && character.alignment === 'True Neutral' ? true : false)) True Neutral
              option(value="Neutral Evil" selected=(character && character.alignment === 'Neutral Evil' ? true : false)) Neutral Evil
              option(value="Chaotic Good" selected=(character && character.alignment === 'Chaotic Good' ? true : false)) Chaotic Good
              option(value="Chaotic Neutral" selected=(character && character.alignment === 'Chaotic Neutral' ? true : false)) Chaotic Neutral
              option(value="Chaotic Evil" selected=(character && character.alignment === 'Chaotic Evil' ? true : false)) Chaotic Evil
        .tabAbilities.tab.px-10#abilitiesTab.hidden
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="strengthInput" class="xl:text-xl text-md text-center md:text-left mb-3") Strength 
            input(type="number" required autocomplete="off" id="strengthInput" name="strengthInput" value=(undefined === character ? '' : character.abilityScores.strength))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="dexterityInput" class="xl:text-xl text-md text-center md:text-left mb-3") Dexterity
            input(type="number" required autocomplete="off" id="dexterityInput" name="dexterityInput" value=(undefined === character ? '' : character.abilityScores.dexterity))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="constitutionInput" class="xl:text-xl text-md text-center md:text-left mb-3") Constitution 
            input(type="number" required autocomplete="off" id="constitutionInput" name="constitutionInput" value=(undefined === character ? '' : character.abilityScores.constitution))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="intelligenceInput" class="xl:text-xl text-md text-center md:text-left mb-3") Intelligence 
            input(type="number" required autocomplete="off" id="intelligenceInput" name="intelligenceInput" value=(undefined === character ? '' : character.abilityScores.intelligence))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="wisdomInput" class="xl:text-xl text-md text-center md:text-left mb-3") Wisdom 
            input(type="number" required autocomplete="off" id="wisdomInput" name="wisdomInput" value=(undefined === character ? '' : character.abilityScores.wisdom))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="charismaInput" class="xl:text-xl text-md text-center md:text-left mb-3") Charisma 
            input(type="number" required autocomplete="off" id="charismaInput" name="charismaInput" value=(undefined === character ? '' : character.abilityScores.charisma))
        .tabCombatStats.tab.px-10#combatStatsTab.hidden
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="armorClassInput" class="xl:text-xl text-md text-center md:text-left mb-3") Armor Class
            input(type="number" required autocomplete="off" id="armorClassInput" name="armorClassInput" value=(undefined === character ? '' : character.combatStats.armorClass))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="speedInput" class="xl:text-xl text-md text-center md:text-left mb-3") Speed
            input(type="number" required autocomplete="off" id="speedInput" name="speedInput" value=(undefined === character ? '' : character.combatStats.speed))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="initiativeInput" class="xl:text-xl text-md text-center md:text-left mb-3") Initiative
            input(type="number" required autocomplete="off" id="initiativeInput" name="initiativeInput" value=(undefined === character ? '' : character.combatStats.initiative))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="hpInput" class="xl:text-xl text-md text-center md:text-left mb-3") HP
            input(type="number" required autocomplete="off" id="hpInput" name="hpInput" value=(undefined === character ? '' : character.combatStats.maxHP))
        .tabAppearance.tab.px-10#appearanceTab.hidden
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="ageInput" class="xl:text-xl text-md text-center md:text-left mb-3") Age 
            input(type="number" autocomplete="off" id="ageInput" name="ageInput" value=(undefined === character ? '' : character.appearance.age))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="heightInput" class="xl:text-xl text-md text-center md:text-left mb-3") Height
            input(type="text" autocomplete="off" id="heightInput" name="heightInput" value=(undefined === character ? '' : character.appearance.height))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="weightInput" class="xl:text-xl text-md text-center md:text-left mb-3") Weight
            input(type="text" autocomplete="off" id="weightInput" name="weightInput" value=(undefined === character ? '' : character.appearance.weight))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="eyesInput" class="xl:text-xl text-md text-center md:text-left mb-3") Eyes
            input(type="text" autocomplete="off" id="eyesInput" name="eyesInput" value=(undefined === character ? '' : character.appearance.eyes))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="skinInput" class="xl:text-xl text-md text-center md:text-left mb-3") Skin
            input(type="text" autocomplete="off" id="skinInput" name="skinInput" value=(undefined === character ? '' : character.appearance.skin))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="hairInput" class="xl:text-xl text-md text-center md:text-left mb-3") Hair
            input(type="text" autocomplete="off" id="hairInput" name="hairInput" value=(undefined === character ? '' : character.appearance.hair))
        .tabPersonality.tab.px-10#personalityTab.hidden
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="personalityTraitsInput" class="xl:text-xl text-md text-center md:text-left mb-3") Personality Traits
            textarea(autocomplete="off" id="personalityTraitsInput" name="personalityTraitsInput" value=(undefined === character ? '' : character.personality.personalityTraits))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="idealsInput" class="xl:text-xl text-md text-center md:text-left mb-3") Ideals
            textarea(autocomplete="off" id="idealsInput" name="idealsInput" value=(undefined === character ? '' : character.personality.ideals))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="bondsInput" class="xl:text-xl text-md text-center md:text-left mb-3") Bonds
            textarea(autocomplete="off" id="bondsInput" name="bondsInput" value=(undefined === character ? '' : character.personality.bonds))
          .input-group.flex.flex-col.justify-center.items-center.py-5(class="md:flex-row")
            label(for="flawsInput" class="xl:text-xl text-md text-center md:text-left mb-3") Flaws
            textarea(autocomplete="off" id="flawsInput" name="flawsInput" value=(undefined === character ? '' : character.personality.flaws))

        if errors
          ul.mt-3#errorList
            for error in errors 
              li.my-3.py-2(class="text-center bg-rose-600/80 sm:text-xl text-base")= error.msg
      button(type="submit" id="createCharButton" class="submitBtn bg-amber-400 hover:bg-amber-300 transition-all duration-150 text-black py-2 w-48 xl:text-xl text-md mx-auto rounded-md") Create character
  else 
    p.text-5xl.text-rose-600.text-center.mt-10 You do not have permission to access this page yet. Sign up or log in first.